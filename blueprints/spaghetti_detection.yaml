blueprint:
  name: Bambu Lab - Spaghetti Detection v1.49
  description: |
    Detects spaghetti failures for Bambu Lab printers using Obico ML API.

    **Based on the work from:** https://github.com/nberktumer/ha-bambu-lab-p1-spaghetti-detection

    **Important Setup for Timeout Feature:**

    To use the 'Detection Disable Timeout' functionality, you need to manually create an `input_datetime` helper in Home Assistant:
    1. Go to "Settings" > "Devices & Services" > "Helpers".
    2. Click "Add Helper" and choose "Date and/or time".
    3. Ensure "Date and Time" is selected for the helper.
    4. Give it a name (e.g., "Spaghetti Detection Timeout Until").
    5. Select this newly created helper in the 'Detection Disable Datetime Helper' input field of this blueprint.

    **Snapshot Setup for Notifications:**
    This blueprint will take a camera snapshot to include in notifications.
    1. Please ensure the directory `/config/www/snapshots/` exists in your Home Assistant configuration.
       If it doesn't, please create it.
    2. Snapshots will be saved by the `camera.snapshot` service to `www/snapshots/bambu_lab_spaghetti_snapshot.jpg`
       (which corresponds to the path `/config/www/snapshots/bambu_lab_spaghetti_snapshot.jpg` on your server).
    3. The notification will then attempt to load the image via the URL `YOUR_HA_HOST/local/snapshots/bambu_lab_spaghetti_snapshot.jpg`.
    **VERY IMPORTANT:** The 'Home Assistant Host' input (configured when you create an automation from this blueprint)
    **MUST** be set to your **externally accessible Home Assistant URL** (e.g., your Nabu Casa URL or your own
    reverse proxy URL like `https://your.domain.com`) for images in notifications to work when your phone is not on your local Wi-Fi.
    A local IP address (e.g., `http://192.168.x.x:8123`) will **NOT** work for external access.
    For enhanced notifications with print job details, configure the optional sensors below.

    **Debug Mode:**
    This blueprint includes a debug mode to test the notification workflow. When enabled, it will simulate
    a detection event at a configurable interval and send a notification as if a failure was detected.

    **Camera Setup Tips for Best Results:**
    - Ensure your printer camera has a clear, well-lit, and stable view of the print bed.
    - Good focus and consistent lighting are crucial for the ML model to perform optimally.

  domain: automation
  input:
    home_assistant_host:
      name: Home Assistant Host
      description: Home Assistant host
      default: "http://192.168.1.123:8123"
    obico_host:
      name: Obico ML API Host
      description: Obico ML API host
      default: "http://192.168.1.123:3333"
    obico_auth_token:
      name: Obico ML API Auth Token
      description: Obico ML API authentication token
      default: "obico_api_secret"
    detection_frequency:
      name: Detection Frequency
      description: The detection algorithm will run in every defined seconds
      default: "/5"
      selector:
        select:
          options:
            - label: Every second
              value: "/1"
            - label: Every 5 seconds
              value: "/5"
            - label: Every 10 seconds
              value: "/10"
            - label: Every 30 seconds
              value: "/30"
            - label: Every 60 seconds
              value: "/59"
          multiple: false
          mode: dropdown
    auto_turn_on_light:
      name: Automatically Turn On Printer Lights
      description: Turns on printer lights before spaghetti detection operation
      default: true
      selector:
        boolean:
    notification_settings:
      name: Notification Settings
      description: Type of notification to send after detecting a failure
      default: standard
      selector:
        select:
          mode: dropdown
          options:
            - label: Critical Notification
              value: critical
            - label: Standard Notification
              value: standard
            - label: None
              value: none
    failure_action:
      name: On Failure Action
      description: What to do after detecting a failure
      default: pause
      selector:
        select:
          mode: dropdown
          options:
            - label: Pause
              value: pause
            - label: Stop
              value: stop
            - label: Warn
              value: warn
    notification_service:
      name: Mobile devices notification service
      description: >-
        The notification service for mobile devices (eg. notify.mobile_app_<your_device_id_here>).
        You can provide both a notify group or a single notify device here.
      default: notify.notify
      selector:
        text:
    printer_print_status_sensor:
      name: Printer Print Status Sensor
      description: Bambu Lab printer print status sensor
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: sensor
              device_class: enum
    printer_current_stage_sensor:
      name: Printer Current Stage Sensor
      description: Bambu Lab printer current stage sensor
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: sensor
              device_class: enum
    printer_camera:
      name: Printer Camera Entity
      description: Bambu Lab printer camera entity
      selector:
        entity:
          filter:
            - domain: camera
    printer_pause_button:
      name: Printer Pause Button Entity
      description: Bambu Lab printer pause button entity
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: button
    printer_resume_button:
      name: Printer Resume Button Entity
      description: Bambu Lab printer resume button entity
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: button
    printer_stop_button:
      name: Printer Stop Button Entity
      description: Bambu Lab printer stop button entity
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: button
    printer_chamber_light:
      name: Printer Chamber Light
      description: Bambu Lab printer chamber light
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: light
    timeout_minutes:
      name: Detection Disable Timeout (Minutes)
      description: Duration in minutes to disable detection actions and notifications when triggering the new notification action.
      default: 60
      selector:
        number:
          min: 1
          max: 1440 # Max 24 hours
          step: 1 # Step in minutes
          unit_of_measurement: minutes
    detection_disable_until_helper:
      name: Detection Disable Datetime Helper
      description: |
        An `input_datetime` helper (with "Date and Time" enabled) is required for the feature that temporarily disables detection.
        You can create this helper manually ("Settings" > "Devices & Services" > "Helpers") or directly via the entity selection dropdown for this input.
        In both cases, ensure "Date and Time" is selected for the helper.
      selector:
        entity:
          domain: input_datetime
    failure_percentage_threshold:
      name: Failure Detection Threshold (%)
      description: >
        Confidence percentage (0-100%) above which a main failure action (Pause/Stop/Warn)
        and notification are triggered. This should be LESS THAN the Emergency Action Threshold (%).
      default: 50 # Default as a number
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider # UI mode: slider or box
          unit_of_measurement: "%"
    emergency_action_threshold:
      name: Emergency Action Threshold (%)
      description: >
        Confidence percentage (0-100%) above which a failure action
        (Pause/Stop/Warn) and notification are triggered, EVEN IF a timeout is active.
        This should be HIGHER than the Failure Detection Threshold (%).
      default: 80
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider # UI mode: slider or box
          unit_of_measurement: "%"
    warn_below_failure_threshold:
      name: Enable Warning Below Failure Threshold
      description: >
        If enabled, send a warning notification if confidence is above the dynamic
        warning threshold but below the user-defined failure threshold.
        No printer action (Pause/Stop) will be taken in this case.
      default: true
      selector:
        boolean:
    initial_frames_to_skip:
      name: Initial Frames to Skip
      description: >
        Number of initial detection frames to skip at the beginning of a print.
        This can help avoid false positives while the first layers are still settling.
      default: 30
      selector:
        number:
          min: 0
          max: 200
          step: 1
    # Debug Mode Inputs
    debug_mode_enabled:
      name: Enable Debug Mode
      description: >
        If enabled, simulates a detection event periodically to test the notification workflow.
        No actual printer actions (pause/stop) will be performed in debug mode.
      default: false
      selector:
        boolean:
    debug_trigger_frequency:
      name: Debug Trigger Frequency (seconds)
      description: How often the debug mode should simulate a detection (in seconds).
      default: 30
      selector:
        number:
          min: 10 # Minimum 10 seconds to avoid excessive triggering
          max: 300 # Maximum 5 minutes
          step: 1
    debug_simulated_confidence:
      name: Debug Simulated Confidence (%)
      description: The confidence percentage (0-100) to simulate in debug mode.
      default: 95
      selector:
        number:
          min: 0
          max: 100
          step: 1
    # Optional sensors for detailed notifications
    printer_task_name_sensor:
      name: (Optional) Printer Task Name Sensor
      description: Sensor entity that shows the current print job's filename.
      default: ""
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: sensor
    printer_print_progress_sensor:
      name: (Optional) Printer Print Progress Sensor
      description: Sensor entity that shows the current print job's progress percentage.
      default: ""
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: sensor
    printer_remaining_time_sensor:
      name: (Optional) Printer Remaining Time Sensor
      description: Sensor entity that shows the remaining time for the current print job (in minutes).
      default: ""
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: sensor
variables:
  HOME_ASSISTANT_HOST_VAR: !input home_assistant_host
  PRINTER_CAMERA_VAR: !input printer_camera
  FAILURE_ACTION_VAR: !input failure_action
  NOTIFICATION_SETTINGS_VAR: !input notification_settings
  DETECTION_FREQUENCY_VAR: !input detection_frequency

  # --- YAML Anchors for Reusable Action Sequences ---
  _action_choose_sequence: &action_choose_anchor # Defines printer actions (pause/stop).
    # Used in a 'choose' block; selected based on FAILURE_ACTION_VAR.
    - conditions: # Pause Action
        - condition: template
          value_template: "{{ FAILURE_ACTION_VAR == 'pause' }}"
      sequence:
        - service: button.press
          target: { entity_id: !input printer_pause_button }
          alias: Execute Pause Action
    - conditions: # Stop Action
        - condition: template
          value_template: "{{ FAILURE_ACTION_VAR == 'stop' }}"
      sequence:
        - service: button.press
          target: { entity_id: !input printer_stop_button }
          alias: Execute Stop Action

  _notification_choose_sequence: &notification_choose_anchor # Defines notification types (critical/standard).
    # Expects 'notification_title_var' to be set.
    - conditions:
        - condition: template
          value_template: "{{ NOTIFICATION_SETTINGS_VAR == 'critical' }}"
      sequence:
        - service: !input notification_service
          data:
            title: "{{ notification_title_var | default('') }}"
            message: >
              Confidence: {{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) | int }}%
              {{- file_info_var | default('') -}}
              {{- progress_info_var | default('') -}}
              {{- remaining_time_info_var | default('') -}}
            data:
              image: "{{ HOME_ASSISTANT_HOST_VAR }}/local/snapshots/bambu_lab_spaghetti_snapshot.jpg?v={{ now().timestamp() | int }}" # Add cache buster
              ttl: 0
              priority: high
              channel: alarm_stream
              push: { sound: { name: default, critical: 1, volume: 0.75 } }
              actions:
                - { action: BAMBU_LAB_RESUME_PRINTING, title: Resume Printing }
                - { action: BAMBU_LAB_STOP_PRINTING, title: Stop Printing }
                - { action: BAMBU_LAB_DISABLE_DETECTION, title: "{{ disable_action_title_var | default('') }}" } # Use a variable, default to empty
          alias: Send Critical Notification
    - conditions:
        - condition: template
          value_template: "{{ NOTIFICATION_SETTINGS_VAR == 'standard' }}"
      sequence:
        - service: !input notification_service
          data:
            title: "{{ notification_title_var | default('') }}"
            message: >
              Confidence: {{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) | int }}%
              {{- file_info_var | default('') -}}
              {{- progress_info_var | default('') -}}
              {{- remaining_time_info_var | default('') -}}
            data:
              image: "{{ HOME_ASSISTANT_HOST_VAR }}/local/snapshots/bambu_lab_spaghetti_snapshot.jpg?v={{ now().timestamp() | int }}" # Add cache buster
              actions:
                - { action: BAMBU_LAB_RESUME_PRINTING, title: Resume Printing }
                - { action: BAMBU_LAB_STOP_PRINTING, title: Stop Printing }
                - { action: BAMBU_LAB_DISABLE_DETECTION, title: "{{ disable_action_title_var | default('') }}" } # Use a variable, default to empty
          alias: Send Standard Notification

mode: single
max_exceeded: silent
trigger:
  # Fired when a print job starts.
  - platform: state
    entity_id:
      - !input printer_current_stage_sensor
    to: printing
    id: BAMBU_LAB_PRINTER_STAGE_CHANGE

  # Triggers for actions selected from mobile notifications.
  - platform: event # Trigger for "Pause Printing" notification action
    event_type: mobile_app_notification_action
    id: BAMBU_LAB_PAUSE_PRINTING
    event_data:
      action: BAMBU_LAB_PAUSE_PRINTING
  - platform: event
    event_type: mobile_app_notification_action
    id: BAMBU_LAB_RESUME_PRINTING
    event_data:
      action: BAMBU_LAB_RESUME_PRINTING
  - platform: event
    event_type: mobile_app_notification_action
    id: BAMBU_LAB_STOP_PRINTING
    event_data:
      action: BAMBU_LAB_STOP_PRINTING
  - platform: event
    event_type: mobile_app_notification_action
    id: BAMBU_LAB_DISABLE_DETECTION
    event_data:
      action: BAMBU_LAB_DISABLE_DETECTION

  # Periodic trigger for running the detection logic.
  - platform: time_pattern
    id: BAMBU_LAB_DETECTION_TRIGGER
    seconds: !input detection_frequency

  # Optional trigger for debug mode
  - platform: time_pattern
    id: BAMBU_LAB_DEBUG_TRIGGER # Unique ID for the debug trigger
    seconds: !input debug_trigger_frequency

condition: [ ]
action:
  # This log should appear every time any trigger fires and the automation action block is entered.
  - service: system_log.write
    data:
      message: "Bambu Lab Spaghetti Detection: Automation action initiated by trigger ID '{{ trigger.id | default('unknown') }}'."
      level: info
    alias: Log Automation Action Start
  - choose:
      # Handle Debug Trigger (HIGHEST PRIORITY among periodic triggers)
      - conditions:
          - condition: trigger
            id: BAMBU_LAB_DEBUG_TRIGGER
          - condition: template # Ensure debug mode is actually enabled
            value_template: !input debug_mode_enabled # Make sure this is ON in the automation's UI
        sequence:
          - service: system_log.write # Log that debug trigger fired
            data:
              message: "Bambu Lab Spaghetti Detection: DEBUG MODE - Simulated detection triggered."
              level: warning # Test: Changed to warning to ensure visibility
            alias: Log Debug Trigger Activation
          - service: camera.snapshot
            target:
              entity_id: !input printer_camera
            data:
              filename: "www/snapshots/bambu_lab_spaghetti_snapshot.jpg" # Use the same snapshot name
            alias: Take Snapshot for DEBUG Notification
          - service: system_log.write # Log after attempting snapshot
            data:
              message: "DEBUG: Attempted snapshot for camera '{!input printer_camera}' to 'www/snapshots/bambu_lab_spaghetti_snapshot.jpg'. Verify file existence and HA Host URL '{!input home_assistant_host}'."
              level: warning # Use warning for visibility
            alias: Log DEBUG Snapshot Attempt
          - delay: "00:00:02" # Increased delay to ensure snapshot is written
            alias: Wait for snapshot to write (DEBUG)
          # Define a variable for the simulated confidence value first
          # Use !input here as blueprint_input might not be available in this specific variables template context
          - variables:
              raw_debug_confidence_value: !input debug_simulated_confidence
              # Fetch other blueprint inputs needed for the notification message
              _input_timeout_minutes: !input timeout_minutes
              _input_task_name_sensor: !input printer_task_name_sensor
              _input_progress_sensor: !input printer_print_progress_sensor
              _input_remaining_time_sensor: !input printer_remaining_time_sensor
              # Define notification variables using local script variables
              notification_title_var: "DEBUG: Simulated Spaghetti Detected"
              disable_action_title_var: "Disable {{ _input_timeout_minutes }} min"
              file_info_var: |
                {% if _input_task_name_sensor != "" and states(_input_task_name_sensor) != "unknown" -%}
                {{ "\n" }}File: {{ states(_input_task_name_sensor) }}
                {%- endif %}
              progress_info_var: |
                {% if _input_progress_sensor != "" and states(_input_progress_sensor) != "unknown" -%}
                {{ "\n" }}Progress: {{ states(_input_progress_sensor) }}%
                {%- endif %}
              remaining_time_info_var: |
                {% if _input_remaining_time_sensor != "" and states(_input_remaining_time_sensor) != "unknown" -%}
                {% set minutes = states(_input_remaining_time_sensor) | int(0) -%}
                {% set days = (minutes // (24 * 60)) -%}
                {% set hours = (minutes % (24 * 60)) // 60 -%}
                {% set remaining_minutes = minutes % 60 -%}
                {{ "\n" }}Remaining: {% if days > 0 %}{{days}}d {% endif%}{% if hours > 0 %}{{hours}}h {% endif %}{{remaining_minutes}}m
                {%- endif %}
          # Simulate a high confidence value by setting the normalized_p number helper
          - service: number.set_value
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_normalized_p
            data:
              value: "{{ (raw_debug_confidence_value | int(95)) / 100.0 }}" # Calculate using the script variable
            alias: Set Simulated Confidence for DEBUG
          # Log crucial variables before attempting notification
          - service: system_log.write
            data:
              message: >
                DEBUG Notification Prep: Title='DEBUG: Simulated Spaghetti Detected',
                Notification Setting='{!input notification_settings}', Service='{!input notification_service}',
                Debug Mode Input='{!input debug_mode_enabled}',
                Image URL='{{ HOME_ASSISTANT_HOST_VAR }}/local/snapshots/bambu_lab_spaghetti_snapshot.jpg?v={{ now().timestamp() | int }}'
              level: warning # Test: Changed to warning to ensure visibility
            alias: Log Debug Notification Prep
          - choose: # Use the anchored choose content for notification
              *notification_choose_anchor
            alias: "Send DEBUG Notification"
          # Update last notify time to respect cooldown for debug notifications too
          - service: datetime.set_value
            data: { datetime: "{{ now() }}" }
            target: { entity_id: datetime.bambu_lab_p1_spaghetti_detection_last_notify_time }
            alias: Update Last Notify Time (DEBUG)
        alias: "Execute Debug Mode Simulated Detection"

      # Handle print start: Reset metrics and optionally turn on light.
      - conditions:
          - condition: trigger
            id: BAMBU_LAB_PRINTER_STAGE_CHANGE
        sequence:
          - service: number.set_value
            data:
              value: 0
            target:
              entity_id:
                - number.bambu_lab_p1_spaghetti_detection_current_frame_number
                - number.bambu_lab_p1_spaghetti_detection_ewm_mean
                - number.bambu_lab_p1_spaghetti_detection_rolling_mean_short
                - number.bambu_lab_p1_spaghetti_detection_rolling_mean_long
                - number.bambu_lab_p1_spaghetti_detection_normalized_p
                - number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean
                - number.bambu_lab_p1_spaghetti_detection_p_sum
          - if: # Turn on printer light if configured and currently off.
            - condition: and
              conditions:
              - condition: state
                entity_id: !input printer_chamber_light
                state: 'off'
              - condition: template
                value_template: !input auto_turn_on_light
            then:
              - service: light.turn_on
                target:
                  entity_id:
                    - !input printer_chamber_light
      # Handle actions triggered from notifications (Pause, Resume, Stop printer).
      - conditions:
          - condition: trigger
            id:
              - BAMBU_LAB_PAUSE_PRINTING
              - BAMBU_LAB_RESUME_PRINTING
              - BAMBU_LAB_STOP_PRINTING
        sequence:
          - choose:
              - conditions:
                  - condition: trigger
                    id:
                      - BAMBU_LAB_PAUSE_PRINTING
                sequence:
                  - service: button.press
                    data: { }
                    target:
                      entity_id: !input printer_pause_button
              - conditions:
                  - condition: trigger
                    id: BAMBU_LAB_RESUME_PRINTING
                sequence:
                  - service: button.press
                    data: { }
                    target:
                      entity_id: !input printer_resume_button
              - conditions:
                  - condition: trigger
                    id: BAMBU_LAB_STOP_PRINTING
                sequence:
                  - service: button.press
                    data: { }
                    target:
                      entity_id: !input printer_stop_button

      # Handle "Disable Detection" action from notification: Sets a timeout.
      - conditions:
          - condition: trigger
            id: BAMBU_LAB_DISABLE_DETECTION
        sequence:
          - service: input_datetime.set_datetime
            target: # Store the time until which detection should be disabled.
              entity_id: !input detection_disable_until_helper
            data:
              datetime: "{{ now() + timedelta(minutes=blueprint_input.timeout_minutes | int(0)) }}"
          - service: system_log.write # Log that detection was temporarily disabled
            data:
              message: "Bambu Lab Spaghetti Detection: Temporarily disabled actions/notifications for {{ blueprint_input.timeout_minutes }} minutes via notification action."
              level: info
      # This is the main spaghetti detection sequence, triggered periodically.
      - conditions:
          - condition: trigger
            id: BAMBU_LAB_DETECTION_TRIGGER
        sequence:
          - if: # Only run detection if the printer is actively printing.
              - condition: not
                conditions:
                  - condition: state
                    entity_id: !input printer_print_status_sensor
                    state: running
            then:
              - stop: ""
          - if: # Additional check for detection frequency (can be more precise than time_pattern alone).
              - condition: template
                value_template: >-
                  {{ now().second % (DETECTION_FREQUENCY_VAR | replace("/", "") | int(0)) > 0 }}
            then:
              - stop: ""
          - if: # Turn on printer light if configured and currently off.
            - condition: and
              conditions:
              - condition: state
                entity_id: !input printer_chamber_light
                state: 'off'
              - condition: template
                value_template: !input auto_turn_on_light
            then:
              - service: light.turn_on
                target:
                  entity_id:
                    - !input printer_chamber_light

          # Sanity check: User-defined failure threshold must be below emergency threshold.
          - if:
              - condition: template
                value_template: "{{ not ((blueprint_input.failure_percentage_threshold | int(0)) < (blueprint_input.emergency_action_threshold | int(0))) }}"
            then:
              - service: system_log.write
                data:
                  message: "Bambu Lab Spaghetti Detection: Configuration Error! 'Failure Detection Threshold (%)' ({{ blueprint_input.failure_percentage_threshold }}) must be less than 'Emergency Action Threshold (%)' ({{ blueprint_input.emergency_action_threshold }})."
                  level: error
                alias: Log Validation Error
              - stop: "Configuration Error: Thresholds misconfigured."
            alias: "Validation Check: Failure < Emergency Threshold"

          # Request spaghetti prediction from Obico ML API.
          - service: bambu_lab_p1_spaghetti_detection.predict
            data:
              obico_host: !input obico_host
              obico_auth_token: !input obico_auth_token
              image_url: "{{ HOME_ASSISTANT_HOST_VAR }}{{ state_attr(PRINTER_CAMERA_VAR, 'entity_picture') }}"
            response_variable: result

          # Process the API response if it's valid.
          - if:
              - condition: template
                value_template: "{{ result is defined and result.get('result') is defined and result.result.get('detections') is defined }}"
            then:
              # --- Update core detection metrics with new data from API ---
              - service: number.set_value # Sum of detected probabilities.
                data:
                  value: "{{ result.result.detections | map(attribute=1) | sum | float(0) }}"
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_p_sum

              - service: number.set_value
                data:
                  value: "{{ states('number.bambu_lab_p1_spaghetti_detection_current_frame_number') | float(0) + 1 }}"
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_current_frame_number

              - service: number.set_value
                data:
                  value: "{{ states('number.bambu_lab_p1_spaghetti_detection_lifetime_frame_number') | float(0) + 1 }}"
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_lifetime_frame_number

              - service: number.set_value
                data:
                  value: "{{ (states('number.bambu_lab_p1_spaghetti_detection_p_sum') | float(0)) * (2 / (12 + 1)) + (states('number.bambu_lab_p1_spaghetti_detection_ewm_mean') | float(0)) * (1 - (2 / (12 + 1))) }}"
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_ewm_mean

              - service: number.set_value
                data:
                  value: "{{ (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_short') | float(0)) + ((states('number.bambu_lab_p1_spaghetti_detection_p_sum') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_short') | float(0))) / (310 if 310 <= (states('number.bambu_lab_p1_spaghetti_detection_current_frame_number') | float(0)) else (states('number.bambu_lab_p1_spaghetti_detection_current_frame_number') | float(0)) + 1) }}"
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_rolling_mean_short

              - service: number.set_value
                data:
                  value: "{{ (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float(0)) + ((states('number.bambu_lab_p1_spaghetti_detection_p_sum') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float(0))) / (7200 if 7200 <= (states('number.bambu_lab_p1_spaghetti_detection_lifetime_frame_number') | float(0)) else (states('number.bambu_lab_p1_spaghetti_detection_lifetime_frame_number') | float(0)) + 1) }}"
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_rolling_mean_long

              - if: # Skip processing for the first few frames as they might be unreliable.
                  - condition: numeric_state
                    entity_id: number.bambu_lab_p1_spaghetti_detection_current_frame_number
                    below: !input initial_frames_to_skip
                then:
                  - stop: ""
                alias: "Skip initial frames"

              # Calculate adjusted EWM (Exponentially Weighted Moving Average)
              - service: number.set_value
                data:
                  value: >-
                    {{ (states('number.bambu_lab_p1_spaghetti_detection_ewm_mean') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float(0)) }}
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean

              # Calculate difference between short and long rolling means
              - service: number.set_value
                data:
                  value: >-
                    {{ ((states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_short') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float(0))) * 3.8 }}
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_rolling_mean_diff

              # Calculate dynamic warning threshold
              - service: number.set_value
                data:
                  value: >-
                    {{ min(0.78, max(0.33, (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_diff') | float(0)))) }}
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_thresh_warning

              # Calculate dynamic failure threshold
              - service: number.set_value
                data:
                  value: >-
                    {{ (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0)) * 1.75 }}
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_thresh_failure

              # Calculate 'p' value (raw probability score)
              - service: number.set_value
                data:
                  value: >-
                    {{ (states('number.bambu_lab_p1_spaghetti_detection_ewm_mean') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float(0)) }}
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_p

              # Normalize the 'p' value to a 0-1 range based on dynamic thresholds
              - choose:
                  - conditions:
                      - condition: numeric_state
                        entity_id: number.bambu_lab_p1_spaghetti_detection_p
                        above: number.bambu_lab_p1_spaghetti_detection_thresh_failure
                    sequence:
                      - service: number.set_value
                        data:
                          value: >-
                            {{ min(1.0, max(2.0 / 3.0, ((((states('number.bambu_lab_p1_spaghetti_detection_p') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0))) * (1.0 - 2.0 / 3.0)) / (((states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0)) * 1.5 - (states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0))) if ((states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0)) * 1.5 - (states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0))) != 0 else 1)) + 2.0 / 3.0)) }}
                        target:
                          entity_id: number.bambu_lab_p1_spaghetti_detection_normalized_p
                  - conditions:
                      - condition: numeric_state
                        entity_id: number.bambu_lab_p1_spaghetti_detection_p
                        above: number.bambu_lab_p1_spaghetti_detection_thresh_warning
                    sequence:
                      - service: number.set_value
                        data:
                          value: >-
                            {{ min(2.0 / 3.0, max(1.0 / 3.0, ((((states('number.bambu_lab_p1_spaghetti_detection_p') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0))) * (2.0 / 3.0 - 1.0 / 3.0)) / (((states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0))) if ((states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0))) != 0 else 1)) + 1.0 / 3.0)) }}
                        target:
                          entity_id: number.bambu_lab_p1_spaghetti_detection_normalized_p
                default:
                  - service: number.set_value
                    data:
                      value: >-
                        {{ min(1.0 / 3.0, max(0, ((states('number.bambu_lab_p1_spaghetti_detection_p') | float(0)) * 1.0 / 3.0) / ((states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0)) if (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0)) != 0 else 1))) }}
                    target:
                      entity_id: number.bambu_lab_p1_spaghetti_detection_normalized_p

              # Further filtering based on adjusted EWM (part of the original detection algorithm).
              - if:
                  - condition: numeric_state
                    entity_id: number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean
                    below: 0.38
                then:
                  - stop: ""
              # Skip if adjusted EWM is within a certain range and below rolling mean difference (original algorithm logic)
              - if:
                  - condition: and
                    conditions:
                      - condition: numeric_state
                        entity_id: number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean
                        below: 0.78
                      - condition: numeric_state
                        entity_id: number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean
                        below: number.bambu_lab_p1_spaghetti_detection_rolling_mean_diff
                then:
                  - stop: ""
            else: # API call failed or returned an invalid response.
              - service: system_log.write
                data:
                  message: "Bambu Lab Spaghetti Detection: API call to Obico failed or returned an unexpected response. Result: {{ result }}"
                  level: warning # Log as warning to avoid spamming errors for transient issues.
              - stop: "API call processing failed for this cycle." # Halt this detection cycle.
            alias: "Process API Response and Update Metrics"

          # Prevent notification spam: only notify once per minute for non-emergency events.
          # This check is bypassed if an emergency threshold is met later.
          - if:
              - condition: template
                value_template: >-
                  {{ now() - states('datetime.bambu_lab_p1_spaghetti_detection_last_notify_time') | as_datetime | as_local < timedelta(minutes=1) }}
            then:
              - stop: ""
            alias: "if now() - last_notify_time < 1min"

          # Check if detection is temporarily disabled by user timeout
          - if:
              - condition: template
                value_template: >-
                  {{ now() < (states(blueprint_input.detection_disable_until_helper) | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00'))) }}
            then:
              - service: system_log.write # Log that actions are skipped due to active user timeout.
                data:
                  message: "Bambu Lab Spaghetti Detection: Action/Notification skipped due to active timeout until {{ states(blueprint_input.detection_disable_until_helper) }}."
                  level: info
              - stop: "Detection temporarily disabled by timeout."
            alias: "Check if detection is temporarily disabled (within timeout period)"
          
          # --- Main decision logic: Determine action based on confidence and thresholds ---
          - choose:
              # Case 1: Emergency Threshold Met (Overrides Timeout and 1-min cooldown)
              - conditions: # Emergency Action
                  - condition: template
                    value_template: "{{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) >= (blueprint_input.emergency_action_threshold | int(0)) }}"
                sequence:
                  - service: camera.snapshot
                    target:
                      entity_id: !input printer_camera
                    data:
                      filename: "www/snapshots/bambu_lab_spaghetti_snapshot.jpg"
                    alias: Take Snapshot for Emergency Notification
                  - service: system_log.write # Log after attempting snapshot
                    data:
                      message: "EMERGENCY: Attempted snapshot for camera '{!input printer_camera}' to 'www/snapshots/bambu_lab_spaghetti_snapshot.jpg'. Verify file existence and HA Host URL '{!input home_assistant_host}'."
                      level: warning # Use warning for visibility
                    alias: Log EMERGENCY Snapshot Attempt
                  - delay: "00:00:02" # Brief delay to ensure snapshot is written
                    alias: Wait for snapshot to write
                  - variables:
                      # Fetch blueprint inputs into local script variables
                      _input_timeout_minutes: !input timeout_minutes
                      _input_task_name_sensor: !input printer_task_name_sensor
                      _input_progress_sensor: !input printer_print_progress_sensor
                      _input_remaining_time_sensor: !input printer_remaining_time_sensor
                      # Define notification variables using local script variables
                      notification_title_var: "Bambu Lab - EMERGENCY: Spaghetti Detected"
                      disable_action_title_var: "Disable {{ _input_timeout_minutes }} min"
                      file_info_var: |
                        {% if _input_task_name_sensor != "" and states(_input_task_name_sensor) != "unknown" -%}
                        {{ "\n" }}File: {{ states(_input_task_name_sensor) }}
                        {%- endif %}
                      progress_info_var: |
                        {% if _input_progress_sensor != "" and states(_input_progress_sensor) != "unknown" -%}
                        {{ "\n" }}Progress: {{ states(_input_progress_sensor) }}%
                        {%- endif %}
                      remaining_time_info_var: |
                        {% if _input_remaining_time_sensor != "" and states(_input_remaining_time_sensor) != "unknown" -%}
                        {% set minutes = states(_input_remaining_time_sensor) | int(0) -%}
                        {% set days = (minutes // (24 * 60)) -%}
                        {% set hours = (minutes % (24 * 60)) // 60 -%}
                        {% set remaining_minutes = minutes % 60 -%}
                        {{ "\n" }}Remaining: {% if days > 0 %}{{days}}d {% endif%}{% if hours > 0 %}{{hours}}h {% endif %}{{remaining_minutes}}m
                        {%- endif %}
                  - choose: # Use the anchored choose content
                      *action_choose_anchor # Printer action (pause/stop)
                    alias: "Execute Anchored Action Choose (Emergency)"
                  - choose: # Use the anchored choose content
                      *notification_choose_anchor # Notification
                    alias: "Execute Anchored Notification Choose (Emergency)"
                  # Reset metrics and update last notify time
                  - service: number.set_value # Reset all relevant detection metrics.
                    data: { value: 0 }
                    target: { entity_id: [number.bambu_lab_p1_spaghetti_detection_current_frame_number, number.bambu_lab_p1_spaghetti_detection_ewm_mean, number.bambu_lab_p1_spaghetti_detection_rolling_mean_short, number.bambu_lab_p1_spaghetti_detection_rolling_mean_long, number.bambu_lab_p1_spaghetti_detection_normalized_p, number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean, number.bambu_lab_p1_spaghetti_detection_p_sum] }
                    alias: Reset Detection Metrics
                  - service: datetime.set_value # Update last notify time
                    data: { datetime: "{{ now() }}" }
                    target: { entity_id: datetime.bambu_lab_p1_spaghetti_detection_last_notify_time }
                    alias: Update Last Notify Time
                alias: "Execute Emergency Action Sequence"

              # Case 2: Main Failure Threshold Met (No Emergency, No active user Timeout, Not within 1-min cooldown)
              - conditions: # Main Failure Action
                  - condition: template # Not Emergency (implicit by order)
                    value_template: "{{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) >= (blueprint_input.failure_percentage_threshold | int(0)) }}"
                  - condition: template # User Timeout NOT active
                    value_template: "{{ not (now() < (states(blueprint_input.detection_disable_until_helper) | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00')))) }}"
                  - condition: template # 1-minute notification cooldown NOT active
                    value_template: "{{ not ((now() - (states('datetime.bambu_lab_p1_spaghetti_detection_last_notify_time') | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00')) | as_local) < timedelta(minutes=1))) }}"
                sequence:
                  - service: camera.snapshot
                    target:
                      entity_id: !input printer_camera
                    data:
                      filename: "www/snapshots/bambu_lab_spaghetti_snapshot.jpg"
                    alias: Take Snapshot for Main Failure Notification
                  - service: system_log.write # Log after attempting snapshot
                    data:
                      message: "MAIN FAILURE: Attempted snapshot for camera '{!input printer_camera}' to 'www/snapshots/bambu_lab_spaghetti_snapshot.jpg'. Verify file existence and HA Host URL '{!input home_assistant_host}'."
                      level: warning # Use warning for visibility
                    alias: Log MAIN FAILURE Snapshot Attempt
                  - delay: "00:00:02" # Brief delay to ensure snapshot is written
                    alias: Wait for snapshot to write
                  - variables:
                      # Fetch blueprint inputs into local script variables
                      _input_timeout_minutes: !input timeout_minutes
                      _input_task_name_sensor: !input printer_task_name_sensor
                      _input_progress_sensor: !input printer_print_progress_sensor
                      _input_remaining_time_sensor: !input printer_remaining_time_sensor
                      # Define notification variables using local script variables
                      notification_title_var: "Bambu Lab - Spaghetti Detected"
                      disable_action_title_var: "Disable {{ _input_timeout_minutes }} min"
                      file_info_var: |
                        {% if _input_task_name_sensor != "" and states(_input_task_name_sensor) != "unknown" -%}
                        {{ "\n" }}File: {{ states(_input_task_name_sensor) }}
                        {%- endif %}
                      progress_info_var: |
                        {% if _input_progress_sensor != "" and states(_input_progress_sensor) != "unknown" -%}
                        {{ "\n" }}Progress: {{ states(_input_progress_sensor) }}%
                        {%- endif %}
                      remaining_time_info_var: |
                        {% if _input_remaining_time_sensor != "" and states(_input_remaining_time_sensor) != "unknown" -%}
                        {% set minutes = states(_input_remaining_time_sensor) | int(0) -%}
                        {% set days = (minutes // (24 * 60)) -%}
                        {% set hours = (minutes % (24 * 60)) // 60 -%}
                        {% set remaining_minutes = minutes % 60 -%}
                        {{ "\n" }}Remaining: {% if days > 0 %}{{days}}d {% endif%}{% if hours > 0 %}{{hours}}h {% endif %}{{remaining_minutes}}m
                        {%- endif %}
                  - choose: # Use the anchored choose content
                      *action_choose_anchor # Printer action (pause/stop)
                    alias: "Execute Anchored Action Choose (Main Failure)"
                  - choose: # Use the anchored choose content
                      *notification_choose_anchor # Notification
                    alias: "Execute Anchored Notification Choose (Main Failure)"
                  # Reset metrics and update last notify time
                  - service: number.set_value # Reset all relevant detection metrics.
                    data: { value: 0 }
                    target: { entity_id: [number.bambu_lab_p1_spaghetti_detection_current_frame_number, number.bambu_lab_p1_spaghetti_detection_ewm_mean, number.bambu_lab_p1_spaghetti_detection_rolling_mean_short, number.bambu_lab_p1_spaghetti_detection_rolling_mean_long, number.bambu_lab_p1_spaghetti_detection_normalized_p, number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean, number.bambu_lab_p1_spaghetti_detection_p_sum] }
                    alias: Reset Detection Metrics
                  - service: datetime.set_value # Update last notify time
                    data: { datetime: "{{ now() }}" }
                    target: { entity_id: datetime.bambu_lab_p1_spaghetti_detection_last_notify_time }
                    alias: Update Last Notify Time
                alias: "Execute Main Failure Action Sequence"

              # Case 3: Warn Below Failure Threshold (No Emergency, No active user Timeout, Not within 1-min cooldown, and relevant conditions met)
              - conditions: # Warning Notification Only
                  - condition: template # Not Emergency (implicit by order)
                    value_template: "{{ blueprint_input.warn_below_failure_threshold }}" # Toggle is ON
                  - condition: template # Confidence is BELOW Min. Failure Threshold
                    value_template: "{{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) < (blueprint_input.failure_percentage_threshold | int(0)) }}"
                  - condition: numeric_state # Confidence is ABOVE dynamic warning threshold (original blueprint logic)
                    entity_id: number.bambu_lab_p1_spaghetti_detection_p # Using _p as per original normalized_p calculation
                    above: number.bambu_lab_p1_spaghetti_detection_thresh_warning
                  - condition: template # User Timeout NOT active
                    value_template: "{{ not (now() < (states(blueprint_input.detection_disable_until_helper) | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00')))) }}"
                  - condition: template # 1-minute notification cooldown NOT active
                    value_template: "{{ not ((now() - (states('datetime.bambu_lab_p1_spaghetti_detection_last_notify_time') | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00')) | as_local) < timedelta(minutes=1))) }}"
                sequence:
                  - service: camera.snapshot
                    target:
                      entity_id: !input printer_camera
                    data:
                      filename: "www/snapshots/bambu_lab_spaghetti_snapshot.jpg"
                    alias: Take Snapshot for Warning Notification
                  - service: system_log.write # Log after attempting snapshot
                    data:
                      message: "WARNING: Attempted snapshot for camera '{!input printer_camera}' to 'www/snapshots/bambu_lab_spaghetti_snapshot.jpg'. Verify file existence and HA Host URL '{!input home_assistant_host}'."
                      level: warning # Use warning for visibility
                    alias: Log WARNING Snapshot Attempt
                  - delay: "00:00:02" # Brief delay to ensure snapshot is written
                    alias: Wait for snapshot to write
                  - variables:
                      # Fetch blueprint inputs into local script variables
                      _input_timeout_minutes: !input timeout_minutes
                      _input_task_name_sensor: !input printer_task_name_sensor
                      _input_progress_sensor: !input printer_print_progress_sensor
                      _input_remaining_time_sensor: !input printer_remaining_time_sensor
                      # Define notification variables using local script variables
                      notification_title_var: "Bambu Lab - Potential Issue (Warning)"
                      disable_action_title_var: "Disable {{ _input_timeout_minutes }} min" # Also needed here for consistency if actions were added
                      file_info_var: |
                        {% if _input_task_name_sensor != "" and states(_input_task_name_sensor) != "unknown" -%}
                        {{ "\n" }}File: {{ states(_input_task_name_sensor) }}
                        {%- endif %}
                      progress_info_var: |
                        {% if _input_progress_sensor != "" and states(_input_progress_sensor) != "unknown" -%}
                        {{ "\n" }}Progress: {{ states(_input_progress_sensor) }}%
                        {%- endif %}
                      remaining_time_info_var: |
                        {% if _input_remaining_time_sensor != "" and states(_input_remaining_time_sensor) != "unknown" -%}
                        {% set minutes = states(_input_remaining_time_sensor) | int(0) -%}
                        {% set days = (minutes // (24 * 60)) -%}
                        {% set hours = (minutes % (24 * 60)) // 60 -%}
                        {% set remaining_minutes = minutes % 60 -%}
                        {{ "\n" }}Remaining: {% if days > 0 %}{{days}}d {% endif%}{% if hours > 0 %}{{hours}}h {% endif %}{{remaining_minutes}}m
                        {%- endif %}
                  # Only send notification, no printer action for this warning case
                  - choose: # Use the anchored choose content
                      *notification_choose_anchor # Notification
                    alias: "Execute Anchored Notification Choose (Warning)"
                  # For warnings, only update last_notify_time to respect cooldown, do not reset all detection metrics.
                  - service: datetime.set_value
                    data: { datetime: "{{ now() }}" }
                    target: { entity_id: datetime.bambu_lab_p1_spaghetti_detection_last_notify_time }
                    alias: Update Last Notify Time (Warning Only)
                alias: "Execute Warning Notification Sequence"
            # If none of the above conditions are met, do nothing in this cycle.
            default: []
            alias: "Main Threshold Decision Block"
