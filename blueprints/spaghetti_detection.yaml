blueprint:
  name: Bambu Lab - Spaghetti Detection
  description: >-
    Detects spaghetti failures for Bambu Lab printers using Obico ML API.
    **Important Setup for Timeout Feature:** This blueprint requires a manually created
    `input_datetime` helper to enable the 'Detection Disable Timeout' functionality.
    Please create one in Home Assistant via "Settings > Devices & Services > Helpers"
    (choose "Add Helper", then "Date and/or time", ensuring "Date" and "Time" are selected).
    Then, select this new helper in the 'Detection Disable Datetime Helper' input below.
  domain: automation
  input:
    home_assistant_host:
      name: Home Assistant Host
      description: Home Assistant host
      default: "http://192.168.1.123:8123"
    obico_host:
      name: Obico ML API Host
      description: Obico ML API host
      default: "http://192.168.1.123:3333"
    obico_auth_token:
      name: Obico ML API Auth Token
      description: Obico ML API authentication token
      default: "obico_api_secret"
    detection_frequency:
      name: Detection Frequency
      description: The detection algorithm will run in every defined seconds
      default: "/5"
      selector:
        select:
          options:
            - label: Every second
              value: "/1"
            - label: Every 5 seconds
              value: "/5"
            - label: Every 10 seconds
              value: "/10"
            - label: Every 30 seconds
              value: "/30"
            - label: Every 60 seconds
              value: "/59"
          multiple: false
          mode: dropdown
    auto_turn_on_light:
      name: Automatically Turn On Printer Lights
      description: Turns on printer lights before spaghetti detection operation
      default: true
      selector:
        boolean:
    notification_settings:
      name: Notification Settings
      description: Type of notification to send after detecting a failure
      default: standard
      selector:
        select:
          mode: dropdown
          options:
            - label: Critical Notification
              value: critical
            - label: Standard Notification
              value: standard
            - label: None
              value: none
    failure_action:
      name: On Failure Action
      description: What to do after detecting a failure
      default: pause
      selector:
        select:
          mode: dropdown
          options:
            - label: Pause
              value: pause
            - label: Stop
              value: stop
            - label: Warn
              value: warn
    notification_service:
      name: Mobile devices notification service
      description: >-
        The notification service for mobile devices (eg. notify.mobile_app_<your_device_id_here>).
        You can provide both a notify group or a single notify device here.
      default: notify.notify
      selector:
        text:
    printer_print_status_sensor:
      name: Printer Print Status Sensor
      description: Bambu Lab printer print status sensor
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: sensor
              device_class: enum
    printer_current_stage_sensor:
      name: Printer Current Stage Sensor
      description: Bambu Lab printer current stage sensor
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: sensor
              device_class: enum
    printer_camera:
      name: Printer Camera Entity
      description: Bambu Lab printer camera entity
      selector:
        entity:
          filter:
            - domain: camera
    printer_pause_button:
      name: Printer Pause Button Entity
      description: Bambu Lab printer pause button entity
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: button
    printer_resume_button:
      name: Printer Resume Button Entity
      description: Bambu Lab printer resume button entity
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: button
    printer_stop_button:
      name: Printer Stop Button Entity
      description: Bambu Lab printer stop button entity
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: button
    printer_chamber_light:
      name: Printer Chamber Light
      description: Bambu Lab printer chamber light
      selector:
        entity:
          filter:
            - integration: bambu_lab
              domain: light
    timeout_minutes:
      name: Detection Disable Timeout (Minutes)
      description: Duration in minutes to disable detection actions and notifications when triggering the new notification action.
      default: 60
      selector:
        number:
          min: 1
          max: 1440 # Max 24 hours
          step: 1 # Step in minutes
          unit_of_measurement: minutes
    detection_disable_until_helper:
      name: Detection Disable Datetime Helper
      description: >-
        An Input Datetime helper (Date and time) required for temporarily disabling detection.
        Must be created manually via "Settings" > "Devices & Services" > "Helpers".
      selector:
        entity:
          domain: input_datetime
    failure_percentage_threshold:
      name: Failure Detection Threshold (%)
      description: >
        Confidence percentage (0-100%) above which a main failure action (Pause/Stop/Warn)
        and notification are triggered. This should be LESS THAN the Emergency Action Threshold (%).
      default: 50 # Default as a number
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider # UI mode: slider or box
          unit_of_measurement: "%"
    emergency_action_threshold:
      name: Emergency Action Threshold (%)
      description: >
        Confidence percentage (0-100%) above which a failure action
        (Pause/Stop/Warn) and notification are triggered, EVEN IF a timeout is active.
        This should be HIGHER than the Failure Detection Threshold (%).
      default: 80
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider # UI mode: slider or box
          unit_of_measurement: "%"
    warn_below_failure_threshold:
      name: Enable Warning Below Failure Threshold
      description: >
        If enabled, send a warning notification if confidence is above the dynamic
        warning threshold but below the user-defined failure threshold.
        No printer action (Pause/Stop) will be taken in this case.
      default: true
      selector:
        boolean:
trigger_variables:
  # Pre-calculate if user-defined failure threshold is correctly set below emergency threshold
  user_failure_below_emergency: "{{ (!input failure_percentage_threshold | int(0)) < (!input emergency_action_threshold | int(0)) }}"

variables:
  HOME_ASSISTANT_HOST_VAR: !input home_assistant_host
  PRINTER_CAMERA_VAR: !input printer_camera
  FAILURE_ACTION_VAR: !input failure_action
  NOTIFICATION_SETTINGS_VAR: !input notification_settings
  DETECTION_FREQUENCY_VAR: !input detection_frequency

  # --- YAML Anchors for Reusable Action Sequences ---
  _action_choose_sequence: &action_choose_anchor # Defines printer actions (pause/stop) based on FAILURE_ACTION_VAR
    # This anchor provides the list of choices for a 'choose' action.
    - conditions: # Pause Action
        - condition: template
          value_template: "{{ FAILURE_ACTION_VAR == 'pause' }}"
      sequence:
        - service: button.press
          target: { entity_id: !input printer_pause_button }
          alias: Execute Pause Action
    - conditions: # Stop Action
        - condition: template
          value_template: "{{ FAILURE_ACTION_VAR == 'stop' }}"
      sequence:
        - service: button.press
          target: { entity_id: !input printer_stop_button }
          alias: Execute Stop Action

  _notification_choose_sequence: &notification_choose_anchor # Defines notification actions (critical/standard)
    # Requires 'notification_title_var' variable to be set before calling this anchor.
    - conditions:
        - condition: template
          value_template: "{{ NOTIFICATION_SETTINGS_VAR == 'critical' }}"
      sequence:
        - service: !input notification_service
          data:
            title: "{{ notification_title_var }}" # Use variable for title
            message: "Confidence: {{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) | int }}%"
            data:
              image: "{{ HOME_ASSISTANT_HOST_VAR }}{{ state_attr(PRINTER_CAMERA_VAR, 'entity_picture') }}"
              ttl: 0
              priority: high
              channel: alarm_stream
              push: { sound: { name: default, critical: 1, volume: 0.75 } }
              actions:
                - { action: BAMBU_LAB_RESUME_PRINTING, title: Resume Printing }
                - { action: BAMBU_LAB_STOP_PRINTING, title: Stop Printing }
                - { action: BAMBU_LAB_DISABLE_DETECTION, title: "Disable {{ !input timeout_minutes }} min" }
          alias: Send Critical Notification
    - conditions:
        - condition: template
          value_template: "{{ NOTIFICATION_SETTINGS_VAR == 'standard' }}"
      sequence:
        - service: !input notification_service
          data:
            title: "{{ notification_title_var }}" # Use variable for title
            message: "Confidence: {{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) | int }}%"
            data:
              image: "{{ HOME_ASSISTANT_HOST_VAR }}{{ state_attr(PRINTER_CAMERA_VAR, 'entity_picture') }}"
              actions:
                - { action: BAMBU_LAB_RESUME_PRINTING, title: Resume Printing }
                - { action: BAMBU_LAB_STOP_PRINTING, title: Stop Printing }
                - { action: BAMBU_LAB_DISABLE_DETECTION, title: "Disable {{ !input timeout_minutes }} min" }
          alias: Send Standard Notification

  _resets_tail_sequence: &resets_tail_anchor # Resets detection metrics and updates last notification time
    - service: number.set_value # Reset detection metrics
      data: { value: 0 }
      target: { entity_id: [number.bambu_lab_p1_spaghetti_detection_current_frame_number, number.bambu_lab_p1_spaghetti_detection_ewm_mean, number.bambu_lab_p1_spaghetti_detection_rolling_mean_short, number.bambu_lab_p1_spaghetti_detection_rolling_mean_long, number.bambu_lab_p1_spaghetti_detection_normalized_p, number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean, number.bambu_lab_p1_spaghetti_detection_p_sum] }
      alias: Reset Detection Metrics
    - service: datetime.set_value # Update last notify time
      data: { datetime: "{{ now() }}" }
      target: { entity_id: datetime.bambu_lab_p1_spaghetti_detection_last_notify_time }
      alias: Update Last Notify Time

mode: single
max_exceeded: silent
trigger:
  # Trigger when printer stage changes to 'printing'
  - platform: state
    entity_id:
      - !input printer_current_stage_sensor
    to: printing
    id: BAMBU_LAB_PRINTER_STAGE_CHANGE

  # Notification action triggers
  - platform: event # Trigger for "Pause Printing" notification action
    event_type: mobile_app_notification_action
    id: BAMBU_LAB_PAUSE_PRINTING
    event_data:
      action: BAMBU_LAB_PAUSE_PRINTING
  - platform: event
    event_type: mobile_app_notification_action
    id: BAMBU_LAB_RESUME_PRINTING
    event_data:
      action: BAMBU_LAB_RESUME_PRINTING
  - platform: event
    event_type: mobile_app_notification_action
    id: BAMBU_LAB_STOP_PRINTING
    event_data:
      action: BAMBU_LAB_STOP_PRINTING
  - platform: event
    event_type: mobile_app_notification_action
    id: BAMBU_LAB_DISABLE_DETECTION
    event_data:
      action: BAMBU_LAB_DISABLE_DETECTION

  # Main detection trigger based on time pattern (frequency)
  - trigger: time_pattern
    id: BAMBU_LAB_DETECTION_TRIGGER
    seconds: !input detection_frequency
condition: [ ]
action:
  - choose:
      # Actions to take when a print starts (BAMBU_LAB_PRINTER_STAGE_CHANGE trigger)
      - conditions:
          - condition: trigger
            id: BAMBU_LAB_PRINTER_STAGE_CHANGE
        sequence:
          - service: number.set_value
            data:
              value: 0
            target:
              entity_id:
                - number.bambu_lab_p1_spaghetti_detection_current_frame_number
                - number.bambu_lab_p1_spaghetti_detection_ewm_mean
                - number.bambu_lab_p1_spaghetti_detection_rolling_mean_short
                - number.bambu_lab_p1_spaghetti_detection_rolling_mean_long
                - number.bambu_lab_p1_spaghetti_detection_normalized_p
                - number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean
                - number.bambu_lab_p1_spaghetti_detection_p_sum
          - if: # Optionally turn on printer light if auto_turn_on_light is true and light is off
            - condition: and
              conditions:
              - condition: state
                entity_id: !input printer_chamber_light
                state: 'off'
              - condition: template
                value_template: !input auto_turn_on_light
            then:
              - service: light.turn_on
                target:
                  entity_id:
                    - !input printer_chamber_light

      # Handle specific "Pause Printing" notification action
      - conditions:
          - condition: trigger
            id: BAMBU_LAB_PAUSE_PRINTING
        sequence:
          - service: button.press
            data: { }
            target:
              entity_id: !input printer_pause_button
            alias: Execute Pause from Notification

      # Handle general notification actions (Pause, Resume, Stop)
      - conditions:
          - condition: trigger
            id:
              - BAMBU_LAB_PAUSE_PRINTING
              - BAMBU_LAB_RESUME_PRINTING
              - BAMBU_LAB_STOP_PRINTING
        sequence:
          - choose:
              - conditions:
                  - condition: trigger
                    id:
                      - BAMBU_LAB_PAUSE_PRINTING
                sequence:
                  - service: button.press
                    data: { }
                    target:
                      entity_id: !input printer_pause_button
              - conditions:
                  - condition: trigger
                    id: BAMBU_LAB_RESUME_PRINTING
                sequence:
                  - service: button.press
                    data: { }
                    target:
                      entity_id: !input printer_resume_button
              - conditions:
                  - condition: trigger
                    id: BAMBU_LAB_STOP_PRINTING
                sequence:
                  - service: button.press
                    data: { }
                    target:
                      entity_id: !input printer_stop_button

      # Handle Disable Detection Notification Action
      - conditions:
          - condition: trigger
            id: BAMBU_LAB_DISABLE_DETECTION
        sequence:
          - service: input_datetime.set_datetime
            target:
              entity_id: !input detection_disable_until_helper
            data:
              datetime: "{{ now() + timedelta(minutes=!input timeout_minutes | int(0)) }}"
          - service: system_log.write # Log that detection was temporarily disabled
            data:
              message: "Bambu Lab Spaghetti Detection: Temporarily disabled actions/notifications for {{ !input timeout_minutes }} minutes via notification action."
              level: info
      # Main detection logic (BAMBU_LAB_DETECTION_TRIGGER)
      - conditions:
          - condition: trigger
            id: BAMBU_LAB_DETECTION_TRIGGER
        sequence:
          - if: # Stop if printer is not in 'running' state
              - condition: not
                conditions:
                  - condition: state
                    entity_id: !input printer_print_status_sensor
                    state: running
            then:
              - stop: ""
          - if: # Skip if current second doesn't match detection frequency (for finer control than time_pattern alone)
              - condition: template
                value_template: >-
                  {{ now().second % (DETECTION_FREQUENCY_VAR | replace("/", "") | int(0)) > 0 }}
            then:
              - stop: ""
          - if: # Optionally turn on printer light if auto_turn_on_light is true and light is off
            - condition: and
              conditions:
              - condition: state
                entity_id: !input printer_chamber_light
                state: 'off'
              - condition: template
                value_template: !input auto_turn_on_light
            then:
              - service: light.turn_on
                target:
                  entity_id:
                    - !input printer_chamber_light

          # Configuration Validation: Ensure Failure Threshold < Emergency Threshold
          - if:
              - condition: template
                value_template: "{{ not trigger_variables.user_failure_below_emergency }}"
            then:
              - service: system_log.write
                data:
                  message: "Bambu Lab Spaghetti Detection: Configuration Error! 'Failure Detection Threshold (%)' ({{ !input failure_percentage_threshold }}) must be less than 'Emergency Action Threshold (%)' ({{ !input emergency_action_threshold }})."
                  level: error
                alias: Log Validation Error
              - stop: "Configuration Error: Thresholds misconfigured."
            alias: "Validation Check: Failure < Emergency Threshold"

          # Call Obico ML API for prediction
          - service: bambu_lab_p1_spaghetti_detection.predict
            data:
              obico_host: !input obico_host
              obico_auth_token: !input obico_auth_token
              image_url: "{{ HOME_ASSISTANT_HOST_VAR }}{{ state_attr(PRINTER_CAMERA_VAR, 'entity_picture') }}"
            response_variable: result

          # --- Update detection metrics based on API response ---
          - service: number.set_value
            data:
              value: "{{ result.result.detections | map(attribute=1) | sum | float(0) }}"
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_p_sum

          - service: number.set_value
            data:
              value: "{{ states('number.bambu_lab_p1_spaghetti_detection_current_frame_number') | float(0) + 1 }}"
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_current_frame_number

          - service: number.set_value
            data:
              value: "{{ states('number.bambu_lab_p1_spaghetti_detection_lifetime_frame_number') | float(0) + 1 }}"
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_lifetime_frame_number

          - service: number.set_value
            data:
              value: "{{ (states('number.bambu_lab_p1_spaghetti_detection_p_sum') | float(0)) * (2 / (12 + 1)) + (states('number.bambu_lab_p1_spaghetti_detection_ewm_mean') | float(0)) * (1 - (2 / (12 + 1))) }}"
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_ewm_mean

          - service: number.set_value
            data:
              value: "{{ (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_short') | float(0)) + ((states('number.bambu_lab_p1_spaghetti_detection_p_sum') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_short') | float(0))) / (310 if 310 <= (states('number.bambu_lab_p1_spaghetti_detection_current_frame_number') | float(0)) else (states('number.bambu_lab_p1_spaghetti_detection_current_frame_number') | float(0)) + 1) }}"
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_rolling_mean_short

          - service: number.set_value
            data:
              value: "{{ (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float(0)) + ((states('number.bambu_lab_p1_spaghetti_detection_p_sum') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float(0))) / (7200 if 7200 <= (states('number.bambu_lab_p1_spaghetti_detection_lifetime_frame_number') | float(0)) else (states('number.bambu_lab_p1_spaghetti_detection_lifetime_frame_number') | float(0)) + 1) }}"
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_rolling_mean_long

          - if: # Initial frames might be noisy, skip detection for the first 30 frames
              - condition: numeric_state
                entity_id: number.bambu_lab_p1_spaghetti_detection_current_frame_number
                below: 30
            then:
              - stop: ""
            alias: "if current_frame_num < 30" # Alias for the if-condition

          # Calculate adjusted EWM (Exponentially Weighted Moving Average)
          - service: number.set_value
            data:
              value: >-
                {{ (states('number.bambu_lab_p1_spaghetti_detection_ewm_mean') | float) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float) }}
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean

          # Calculate difference between short and long rolling means
          - service: number.set_value
            data:
              value: >-
                {{ ((states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_short') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float(0))) * 3.8 }}
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_rolling_mean_diff

          # Calculate dynamic warning threshold
          - service: number.set_value
            data:
              value: >-
                {{ min(0.78, max(0.33, (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_diff') | float(0)))) }}
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_thresh_warning

          # Calculate dynamic failure threshold
          - service: number.set_value
            data:
              value: >-
                {{ (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0)) * 1.75 }}
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_thresh_failure

          # Calculate 'p' value (raw probability score)
          - service: number.set_value
            data:
              value: >-
                {{ (states('number.bambu_lab_p1_spaghetti_detection_ewm_mean') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_rolling_mean_long') | float(0)) }}
            target:
              entity_id: number.bambu_lab_p1_spaghetti_detection_p

          # Normalize the 'p' value to a 0-1 range based on dynamic thresholds
          - choose:
              - conditions:
                  - condition: numeric_state
                    entity_id: number.bambu_lab_p1_spaghetti_detection_p
                    above: number.bambu_lab_p1_spaghetti_detection_thresh_failure
                sequence:
                  - service: number.set_value
                    data:
                      value: >-
                        {{ min(1.0, max(2.0 / 3.0, ((((states('number.bambu_lab_p1_spaghetti_detection_p') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0))) * (1.0 - 2.0 / 3.0)) / (((states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0)) * 1.5 - (states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0))) if ((states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0)) * 1.5 - (states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0))) != 0 else 1)) + 2.0 / 3.0)) }}
                    target:
                      entity_id: number.bambu_lab_p1_spaghetti_detection_normalized_p
              - conditions:
                  - condition: numeric_state
                    entity_id: number.bambu_lab_p1_spaghetti_detection_p
                    above: number.bambu_lab_p1_spaghetti_detection_thresh_warning
                sequence:
                  - service: number.set_value
                    data:
                      value: >-
                        {{ min(2.0 / 3.0, max(1.0 / 3.0, ((((states('number.bambu_lab_p1_spaghetti_detection_p') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0))) * (2.0 / 3.0 - 1.0 / 3.0)) / (((states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0))) if ((states('number.bambu_lab_p1_spaghetti_detection_thresh_failure') | float(0)) - (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0))) != 0 else 1)) + 1.0 / 3.0)) }}
                    target:
                      entity_id: number.bambu_lab_p1_spaghetti_detection_normalized_p
            default:
              - service: number.set_value
                data:
                  value: >-
                    {{ min(1.0 / 3.0, max(0, ((states('number.bambu_lab_p1_spaghetti_detection_p') | float(0)) * 1.0 / 3.0) / ((states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0)) if (states('number.bambu_lab_p1_spaghetti_detection_thresh_warning') | float(0)) != 0 else 1))) }}
                target:
                  entity_id: number.bambu_lab_p1_spaghetti_detection_normalized_p

          # Skip if adjusted EWM is below a low threshold (original algorithm logic)
          - if:
              - condition: numeric_state
                entity_id: number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean
                below: 0.38
            then:
              - stop: ""
          # Skip if adjusted EWM is within a certain range and below rolling mean difference (original algorithm logic)
          - if:
              - condition: and
                conditions:
                  - condition: numeric_state
                    entity_id: number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean
                    below: 0.78
                  - condition: numeric_state
                    entity_id: number.bambu_lab_p1_spaghetti_detection_adjusted_ewm_mean
                    below: number.bambu_lab_p1_spaghetti_detection_rolling_mean_diff
            then:
              - stop: ""

          # Cooldown: Do not send notifications more than once per minute (unless it's an emergency)
          - if:
              - condition: template
                value_template: >-
                  {{ now() - states('datetime.bambu_lab_p1_spaghetti_detection_last_notify_time') | as_datetime | as_local < timedelta(minutes=1) }}
            then:
              - stop: ""
            alias: "if now() - last_notify_time < 1min" # Alias for the if-condition

          # Check if detection is temporarily disabled by user timeout
          - if:
              - condition: template
                value_template: >-
                  {{ now() < (states(!input detection_disable_until_helper) | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00'))) }}
            then:
              - service: system_log.write # Optional: Log that action was skipped due to timeout
                data:
                  message: "Bambu Lab Spaghetti Detection: Action/Notification skipped due to active timeout until {{ states(!input detection_disable_until_helper) }}."
                  level: info
              - stop: "Detection temporarily disabled by timeout."
            alias: "Check if detection is temporarily disabled (within timeout period)"
          
          # --- Main Decision Logic based on Thresholds ---
          - choose:
              # Case 1: Emergency Threshold Met (Overrides Timeout and 1-min cooldown)
              - conditions: # Emergency Action
                  - condition: template
                    value_template: "{{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) >= (!input emergency_action_threshold | int(0)) }}"
                sequence:
                  - variables: { notification_title_var: "Bambu Lab - EMERGENCY: Spaghetti Detected" }
                  - choose: # Use the anchored choose content
                      *action_choose_anchor # Printer action (pause/stop)
                    alias: "Execute Anchored Action Choose (Emergency)"
                  - choose: # Use the anchored choose content
                      *notification_choose_anchor # Notification
                    alias: "Execute Anchored Notification Choose (Emergency)"
                  - *resets_tail_anchor
                alias: "Execute Emergency Action Sequence"

              # Case 2: Main Failure Threshold Met (No Emergency, No active user Timeout, Not within 1-min cooldown)
              - conditions: # Main Failure Action
                  - condition: template # Not Emergency (implicit by order)
                    value_template: "{{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) >= (!input failure_percentage_threshold | int(0)) }}"
                  - condition: template # User Timeout NOT active
                    value_template: "{{ not (now() < (states(!input detection_disable_until_helper) | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00')))) }}"
                  - condition: template # 1-minute notification cooldown NOT active
                    value_template: "{{ not ((now() - (states('datetime.bambu_lab_p1_spaghetti_detection_last_notify_time') | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00')) | as_local) < timedelta(minutes=1))) }}"
                sequence:
                  - variables: { notification_title_var: "Bambu Lab - Spaghetti Detected" }
                  - choose: # Use the anchored choose content
                      *action_choose_anchor # Printer action (pause/stop)
                    alias: "Execute Anchored Action Choose (Main Failure)"
                  - choose: # Use the anchored choose content
                      *notification_choose_anchor # Notification
                    alias: "Execute Anchored Notification Choose (Main Failure)"
                  - *resets_tail_anchor
                alias: "Execute Main Failure Action Sequence"

              # Case 3: Warn Below Failure Threshold (No Emergency, No active user Timeout, Not within 1-min cooldown, and relevant conditions met)
              - conditions: # Warning Notification Only
                  - condition: template # Not Emergency (implicit by order)
                    value_template: "{{ !input warn_below_failure_threshold }}" # Toggle is ON
                  - condition: template # Confidence is BELOW Min. Failure Threshold
                    value_template: "{{ (states('number.bambu_lab_p1_spaghetti_detection_normalized_p') | float(0) * 100) < (!input failure_percentage_threshold | int(0)) }}"
                  - condition: numeric_state # Confidence is ABOVE dynamic warning threshold (original blueprint logic)
                    entity_id: number.bambu_lab_p1_spaghetti_detection_p # Using _p as per original normalized_p calculation
                    above: number.bambu_lab_p1_spaghetti_detection_thresh_warning
                  - condition: template # User Timeout NOT active
                    value_template: "{{ not (now() < (states(!input detection_disable_until_helper) | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00')))) }}"
                  - condition: template # 1-minute notification cooldown NOT active
                    value_template: "{{ not ((now() - (states('datetime.bambu_lab_p1_spaghetti_detection_last_notify_time') | as_datetime(default=as_datetime('1970-01-01T00:00:00+00:00')) | as_local) < timedelta(minutes=1))) }}"
                sequence:
                  - variables: { notification_title_var: "Bambu Lab - Potential Issue (Warning)" }
                  # Only send notification, no printer action for this warning case
                  - choose: # Use the anchored choose content
                      *notification_choose_anchor # Notification
                    alias: "Execute Anchored Notification Choose (Warning)"
                  # For warnings, only update last_notify_time to respect cooldown, do not reset all detection metrics.
                  - service: datetime.set_value
                    data: { datetime: "{{ now() }}" }
                    target: { entity_id: datetime.bambu_lab_p1_spaghetti_detection_last_notify_time }
                    alias: Update Last Notify Time (Warning Only)
                alias: "Execute Warning Notification Sequence"
            # Default: No specific action/notification conditions met.
            # Timeout and cooldown checks are handled within the conditions above or in preceding 'if' blocks.
            default: []
            alias: "Main Threshold Decision Block"
